{"ast":null,"code":"/*\r\nimport React, { useState, useRef } from 'react';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport Category from './Category';\r\nimport Home from './Home';\r\nimport Login from './Login';\r\nimport Register from './Register';  // Import Register page\r\nimport Layout from './Layout';\r\nimport NoPage from './NoPage';\r\nimport './style.css';\r\n\r\nexport default function App() {\r\n  const [uname, unameSetter] = useState(null);\r\n  const unameRef = useRef();\r\n  const pwordRef = useRef();\r\n\r\n  const handleLogout = () => {\r\n    unameSetter(null);\r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    const user = {\r\n      uname: unameRef.current.value,\r\n      pword: pwordRef.current.value,\r\n    };\r\n\r\n    const parameters = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(user),\r\n    };\r\n\r\n    const url = `http://localhost:5001/users/login`;\r\n\r\n    try {\r\n      const res = await fetch(url, parameters);\r\n\r\n      if (!res.ok) {\r\n        throw new Error('Failed to fetch from the server');\r\n      }\r\n\r\n      const json = await res.json();\r\n      if (json.success) {\r\n        console.log('Valid username and password');\r\n        unameSetter(user.uname);\r\n      } else {\r\n        console.log('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error.message);\r\n    }\r\n  };\r\n\r\n  const handleRegister = async () => {\r\n    const user = {\r\n      uname: unameRef.current.value,\r\n      pword: pwordRef.current.value,\r\n    };\r\n\r\n    const parameters = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(user),\r\n    };\r\n\r\n    const url = `http://localhost:5001/users/register`; // Update to the register endpoint\r\n\r\n    try {\r\n      const res = await fetch(url, parameters);\r\n\r\n      if (!res.ok) {\r\n        throw new Error('Failed to fetch from the server');\r\n      }\r\n\r\n      const json = await res.json();\r\n      if (json.success) {\r\n        console.log('User registered successfully');\r\n        unameSetter(user.uname);  // Automatically log in after registration\r\n      } else {\r\n        console.log('Registration failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Layout />}>\r\n          <Route index element={<Home uname={uname} />} />\r\n          <Route path=\"contacts\" element={<Category />} />\r\n          <Route path=\"*\" element={<NoPage />} />\r\n        </Route>\r\n        <Route path=\"/login\" element={<Login unameRef={unameRef} pwordRef={pwordRef} handleLogin={handleLogin} />} />\r\n        <Route path=\"/register\" element={<Register unameRef={unameRef} pwordRef={pwordRef} handleRegister={handleRegister} />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n*/\n\n/*\r\nimport React, {useState, useRef} from \"react\";\r\n\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\n\r\nimport Category from './Category.js';\r\n\r\nimport Home from './Home.js';\r\n\r\nimport Login from './Login.js';\r\n\r\nimport Layout from './Layout.js';\r\n\r\nimport NoPage from './NoPage.js';\r\n\r\nimport './style.css';\r\n\r\nconst user = \"\"\r\n\r\nexport default function App() {\r\nconst [uname, unameSetter] = useState(null);\r\nconst unameRef = useRef();\r\nconst pwordRef = useRef();\r\n\r\nconst handleLogout = () => {\r\n  unameSetter(null);\r\n}\r\nconst handleLogin = () => {\r\n  let user = {};\r\n  user.uname = useRef.current.value;\r\n  user.pword = pwordRef.current.value;\r\n}\r\n\r\nlet parameters = {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\"\r\n  },\r\n  body: JSON.stringify(user)\r\n}\r\nconsole.log('user.uname called')\r\nlet url = `http://localhost:5001/user`;\r\nfetch (url, parameters)\r\n.then( res => res.json())\r\n.then( json => {\r\n  console.log(JSON.stringify(json))\r\n  const u = json.users;\r\n  if (!u) {\r\n    console.log('invalid uname does not exist');\r\n  }\r\n  else if (u[0].pword !== user.pword) {\r\n    console.log('invalid password');\r\n  }\r\n  else {\r\n    console.log('valid uname and password')\r\n    unameSetter (user.uname);\r\n  }\r\n})\r\n\r\n\r\n  return (\r\n\r\n    <BrowserRouter>\r\n\r\n      <Routes>\r\n\r\n        <Route path=\"/\" element={<Layout />}>\r\n\r\n          <Route index element={<Home  />} />\r\n\r\n          <Route path=\"contacts\" element={<Category  />} />\r\n\r\n          <Route path=\"*\" element={<NoPage />} />\r\n\r\n        </Route>\r\n\r\n      </Routes>\r\n\r\n    </BrowserRouter>\r\n\r\n  );\r\n\r\n}  */","map":{"version":3,"names":[],"sources":["C:/Users/egwya/OneDrive/Documents/workspace/ProjectFrontendServer2025/src/App.js"],"sourcesContent":["/*\r\nimport React, { useState, useRef } from 'react';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport Category from './Category';\r\nimport Home from './Home';\r\nimport Login from './Login';\r\nimport Register from './Register';  // Import Register page\r\nimport Layout from './Layout';\r\nimport NoPage from './NoPage';\r\nimport './style.css';\r\n\r\nexport default function App() {\r\n  const [uname, unameSetter] = useState(null);\r\n  const unameRef = useRef();\r\n  const pwordRef = useRef();\r\n\r\n  const handleLogout = () => {\r\n    unameSetter(null);\r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    const user = {\r\n      uname: unameRef.current.value,\r\n      pword: pwordRef.current.value,\r\n    };\r\n\r\n    const parameters = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(user),\r\n    };\r\n\r\n    const url = `http://localhost:5001/users/login`;\r\n\r\n    try {\r\n      const res = await fetch(url, parameters);\r\n\r\n      if (!res.ok) {\r\n        throw new Error('Failed to fetch from the server');\r\n      }\r\n\r\n      const json = await res.json();\r\n      if (json.success) {\r\n        console.log('Valid username and password');\r\n        unameSetter(user.uname);\r\n      } else {\r\n        console.log('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error.message);\r\n    }\r\n  };\r\n\r\n  const handleRegister = async () => {\r\n    const user = {\r\n      uname: unameRef.current.value,\r\n      pword: pwordRef.current.value,\r\n    };\r\n\r\n    const parameters = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(user),\r\n    };\r\n\r\n    const url = `http://localhost:5001/users/register`; // Update to the register endpoint\r\n\r\n    try {\r\n      const res = await fetch(url, parameters);\r\n\r\n      if (!res.ok) {\r\n        throw new Error('Failed to fetch from the server');\r\n      }\r\n\r\n      const json = await res.json();\r\n      if (json.success) {\r\n        console.log('User registered successfully');\r\n        unameSetter(user.uname);  // Automatically log in after registration\r\n      } else {\r\n        console.log('Registration failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Layout />}>\r\n          <Route index element={<Home uname={uname} />} />\r\n          <Route path=\"contacts\" element={<Category />} />\r\n          <Route path=\"*\" element={<NoPage />} />\r\n        </Route>\r\n        <Route path=\"/login\" element={<Login unameRef={unameRef} pwordRef={pwordRef} handleLogin={handleLogin} />} />\r\n        <Route path=\"/register\" element={<Register unameRef={unameRef} pwordRef={pwordRef} handleRegister={handleRegister} />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n*/\r\n\r\n\r\n\r\n\r\n/*\r\nimport React, {useState, useRef} from \"react\";\r\n\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\n\r\nimport Category from './Category.js';\r\n\r\nimport Home from './Home.js';\r\n\r\nimport Login from './Login.js';\r\n\r\nimport Layout from './Layout.js';\r\n\r\nimport NoPage from './NoPage.js';\r\n\r\nimport './style.css';\r\n\r\nconst user = \"\"\r\n\r\nexport default function App() {\r\nconst [uname, unameSetter] = useState(null);\r\nconst unameRef = useRef();\r\nconst pwordRef = useRef();\r\n\r\nconst handleLogout = () => {\r\n  unameSetter(null);\r\n}\r\nconst handleLogin = () => {\r\n  let user = {};\r\n  user.uname = useRef.current.value;\r\n  user.pword = pwordRef.current.value;\r\n}\r\n\r\nlet parameters = {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\"\r\n  },\r\n  body: JSON.stringify(user)\r\n}\r\nconsole.log('user.uname called')\r\nlet url = `http://localhost:5001/user`;\r\nfetch (url, parameters)\r\n.then( res => res.json())\r\n.then( json => {\r\n  console.log(JSON.stringify(json))\r\n  const u = json.users;\r\n  if (!u) {\r\n    console.log('invalid uname does not exist');\r\n  }\r\n  else if (u[0].pword !== user.pword) {\r\n    console.log('invalid password');\r\n  }\r\n  else {\r\n    console.log('valid uname and password')\r\n    unameSetter (user.uname);\r\n  }\r\n})\r\n\r\n\r\n  return (\r\n\r\n    <BrowserRouter>\r\n\r\n      <Routes>\r\n\r\n        <Route path=\"/\" element={<Layout />}>\r\n\r\n          <Route index element={<Home  />} />\r\n\r\n          <Route path=\"contacts\" element={<Category  />} />\r\n\r\n          <Route path=\"*\" element={<NoPage />} />\r\n\r\n        </Route>\r\n\r\n      </Routes>\r\n\r\n    </BrowserRouter>\r\n\r\n  );\r\n\r\n}  */"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}